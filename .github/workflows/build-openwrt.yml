name: Build openwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEVICE_NAME: ""
  FILE_DATE: ""

jobs:
  build:  
    runs-on: ubuntu-24.04
    steps:
     - name: Checkout
       uses: actions/checkout@v4
      
     - name: Pre Initialization environment
       run: |
        docker rmi `docker images -q` || true
        sudo -E rm -rf /mnt/tmp-pv.img || true
        sudo -E df -h
        sudo -E ls -lh /mnt
        
     - name: Initialization environment
       env:
         DEBIAN_FRONTEND: noninteractive
       run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install mergerfs build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev \
        patch unzip zlib1g-dev libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo \
        libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata \
        python3-pyelftools python3-dev clang-15 llvm-15 npm
        sudo npm install -g pnpm
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        
     - name: Clean up disk
       run: sudo rm -rf /opt/*
       
     - name: Clone source code
       run: |
        sudo -E rm -rf /mnt/work /mnt/work_dir /data_dir
        sudo -E mkdir -p /data_dir
        sudo -E mkdir -p /mnt/work_dir
        sudo -E mkdir -p /mnt/work
        sudo -E chmod 777 /mnt/work /mnt/work_dir /data_dir
        sudo -E mergerfs -o defaults,allow_other,use_ino,category.create=mfs /mnt/work_dir:/data_dir /mnt/work
        git clone --depth 1 --branch 24.10 https://github.com/lienol/openwrt.git /mnt/work/openwrt
        
     - name: Load custom feeds
       run: |
        [ -e $GITHUB_WORKSPACE/$FEEDS_CONF ] && mv $GITHUB_WORKSPACE/$FEEDS_CONF /mnt/work/openwrt/feeds.conf.default
        chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
        cd /mnt/work/openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
     - name: Update feeds
       run: cd /mnt/work/openwrt && ./scripts/feeds update -a
       
     - name: Install feeds
       run: cd /mnt/work/openwrt && ./scripts/feeds install -a

     - name: Load custom configuration
       run: |
           [ -e $GITHUB_WORKSPACE/files ] && mv $GITHUB_WORKSPACE/files /mnt/work/openwrt/files
           [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && mv $GITHUB_WORKSPACE/$CONFIG_FILE /mnt/work/openwrt/.config
           chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
           cd /mnt/work/openwrt
           $GITHUB_WORKSPACE/$DIY_P2_SH
           
     - name: fix rust
       run: |  
           cd /mnt/work/openwrt
           sed -i 's/--set=llvm.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/' feeds/packages/lang/rust/Makefile
     - name: Add libcron package
       run: |
           cd /mnt/work/openwrt
           mkdir -p package/libcron && \
           wget -O package/libcron/Makefile \
           https://raw.githubusercontent.com/immortalwrt/packages/master/libs/libcron/Makefile  
  
     - name: Download package
       id: package
       run: |
           cd /mnt/work/openwrt
           make defconfig
           make download -j$(nproc)
           find dl -size -1024c -exec ls -l {} \;
           find dl -size -1024c -exec rm -f {} \;
        
     - name: Compile the firmware
       id: compile
       run: |
        cd /mnt/work/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
     - name: Upload make.log if failure
       uses: actions/upload-artifact@v4
       if: failure()
       with:
         name: build openwrt
         path: /mnt/work/openwrt/make.log

     - name: Free Disk Space After Build
       run: |
        echo "Disk space before post-build cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        echo "Disk space after post-build cleanup:"
        df -h
        
     - name: Organize files
       id: organize
       run: |
        cd /mnt/work/openwrt/bin/targets/*/*
        rm -rf packages
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE=${FIRMWARE_PATH}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
     - name: Upload firmware directory
       uses: actions/upload-artifact@v4
       with:
         name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
         path: ${{ env.FIRMWARE }}  
